

==============================
    Мапа
==============================
Часто
-------------
  
      -Что такое мапа? 
Мапа (или карта) — это структура данных, которая хранит пары “ключ-значение”. Каждый ключ уникален и используется для доступа к соответствующему значению.

Средне
-------------
     
      -Что произойдет при конкуррентной записи в мапу? 
При конкурентной записи в мапу без должной синхронизации могут возникнуть гонки данных, что приведет к некорректным результатам или повреждению данных.

      -Как устроена мапа под капотом? 
Мапы часто реализуются с использованием хеш-таблиц, где ключи хешируются для определения индекса в массиве, где хранятся значения.

      -Какие ключи могут быть у мапы? 
Ключи могут быть любого типа, который поддерживает операции сравнения и хеширования. В большинстве языков программирования это могут быть строки, числа и другие примитивные типы.

     -Какая сложность работы с мапой? 
В среднем, операции вставки, удаления и поиска в мапе имеют сложность O(1), но в худшем случае (при множественных коллизиях) сложность может достигать O(n).

     -Можно ли взять адрес элемента мапы и почему? 
В большинстве реализаций мап нельзя напрямую взять адрес элемента, так как мапы могут изменять внутреннюю структуру при добавлении или удалении элементов, что делает адреса непостоянными.

     -Как работает эвакуация данных? 
Эвакуация данных (rehashing) происходит, когда мапа перераспределяет элементы в новый массив большего размера, чтобы уменьшить количество коллизий и поддерживать эффективность операций.


Редко
-----------


     -Как разрешаются коллизии в мапе? 
Коллизии разрешаются различными методами, такими как цепочки (chaining) или открытая адресация (open addressing).

     -Как сделать конкурентную запись в мапу? 
Для конкурентной записи используются специальные структуры данных, такие как sync.Map в Go или ConcurrentHashMap в Java, которые обеспечивают потокобезопасность.

     -Как достигается константная сложность работы с мапой? 
Константная сложность достигается за счет использования эффективных хеш-функций и поддержания низкого коэффициента загрузки (load factor).

     -В функции make для мапы мы указываем число. Что оно дает? 
Это число задает начальный размер внутреннего массива мапы, что помогает избежать частых перераспределений при добавлении элементов.

     -Для чего используется мапа? 
Мапы используются для быстрого поиска, вставки и удаления данных по ключу, что делает их полезными в различных приложениях, от кэширования до хранения конфигурационных данных.

     -Мапа потокобезопасная? 
Обычные мапы не потокобезопасны. Для потокобезопасности используются специальные реализации, такие как sync.Map.

     -Пробовали из разных потоков писать в мапу? 
Писать в обычную мапу из разных потоков без синхронизации не рекомендуется из-за риска гонок данных.

     -Стало слишком много коллизий в мапе, как решить проблему? 
Увеличение размера мапы и перераспределение (rehashing) может помочь уменьшить количество коллизий.

     -Какая сложность работы с мапой в худшем случае? 
В худшем случае сложность операций может достигать O(n), особенно если все ключи хешируются в один и тот же индекс.

     -Что произойдет при конкуррентном чтении из мапы? 
Конкуррентное чтение из мапы обычно безопасно, но если одновременно происходят записи, это может привести к некорректным данным.

     -Чем мапа отличается от sync.Map? 
sync.Map в Go специально разработана для безопасного использования в многопоточных средах, обеспечивая атомарные операции и избегая гонок данных.

==============================
    Массивы/Слайсы
==============================
Часто
-------------
     -Что такое слайс? 
Слайс в Go — это динамическая структура данных, которая представляет собой ссылку на массив. Слайсы позволяют работать с подмножествами массивов и могут изменять свою длину.

     -Чем массив отличается от слайса? 
Массивы имеют фиксированную длину, определяемую при создании, и не могут изменяться. Слайсы, напротив, являются динамическими и могут изменять свою длину с помощью встроенных функций, таких как append.


Средне 
-------------
      -Как работает append? 
Функция append добавляет элементы в конец слайса. Если вместимость слайса недостаточна для добавления новых элементов, создается новый массив с увеличенной вместимостью, и элементы копируются в него.


Редко 
------------
      -Как правильно/неправильно работать со слайсом? 
   Правильно:
Использовать append для добавления элементов.
Инициализировать слайсы с помощью make для указания начальной длины и вместимости.
   Неправильно:
Изменять элементы слайса, если он используется в нескольких местах одновременно без синхронизации.

     -Для чего можно использовать массивы в Golang? 
Массивы полезны, когда требуется фиксированная длина и высокая производительность, например, для хранения данных, которые не будут изменяться.

      -До какого размера можно увеличивать слайс? 
Размер слайса ограничен доступной памятью системы.

     -Допустима ли конкурентная работа со слайсом? 
Конкурентная работа со слайсом допустима, но требует синхронизации (например, с помощью мьютексов) для предотвращения гонок данных.

     -Для чего используются слайсы? 
Слайсы используются для работы с динамическими коллекциями данных, где требуется изменяемая длина.

     -Берем от слайса слайс, куда будет указывать его указатель? 
Новый слайс будет указывать на тот же массив, что и исходный, но с другим начальным и конечным индексами.

     -В чем разница между слайсом указателей и слайсом значений с точки зрения вызова функции? 
Слайс указателей передает ссылки на элементы, что позволяет изменять исходные данные. Слайс значений передает копии элементов, что не влияет на исходные данные.

     -Где в памяти размещается массив, а где слайс? 
Массивы размещаются в непрерывной области памяти. Слайсы содержат указатель на массив, длину и вместимость, и могут указывать на любую часть массива.

     -Какие методы оптимизации работы со слайсами ты бы применил в работе?
Инициализация слайсов с достаточной вместимостью.
Использование copy для копирования данных между слайсами.
Какие есть ограничения при работе со слайсом? Основное ограничение — это доступная память системы. Также важно учитывать, что слайсы не могут быть сравнены напрямую, кроме как с nil.

     -Какие есть средства для добавления элементов в слайс? 
Основное средство — это функция append.

     -Какая есть функция для создания слайса с длиной отличной от нуля? 
Функция make позволяет создать слайс с заданной длиной и вместимостью: make([]int, длина, вместимость).

     -С какой скоростью идет поиск в массиве и почему? 
Поиск в массиве имеет линейную сложность O(n), так как в худшем случае требуется проверить каждый элемент.

     -Чем хорош массив по сравнению со слайсом? 
Массивы обеспечивают более высокую производительность и предсказуемость, так как их длина фиксирована и не изменяется.

     -Что такое массив? 
Массив — это коллекция элементов одного типа с фиксированной длиной, определяемой при создании.


==============================
    Каналы
==============================
Часто
-------------
     -Что такое каналы? 
Каналы в Go — это средства коммуникации между горутинами. Они позволяют одной горутине отправлять данные, а другой — получать их, обеспечивая синхронизацию и обмен данными без использования явных блокировок.


Средне
--------------
     -Как устроен канал и как он работает под капотом? 
Каналы в Go представляют собой структуры данных, содержащие буфер для хранения элементов, а также очереди горутин, ожидающих записи или чтения. Когда горутина пытается записать данные в канал, она блокируется до тех пор, пока другая горутина не прочитает эти данные, и наоборот.

     -Какие есть типы каналов в Golang? 
В Go существуют два типа каналов:
Небуферизованные каналы: данные передаются немедленно, и горутина блокируется до тех пор, пока другая горутина не примет данные.
Буферизованные каналы: данные могут быть записаны в буфер, и горутина блокируется только если буфер заполнен.
Что если писать/читать в закрытый канал? Попытка записи в закрытый канал приведет к панике (runtime panic). Чтение из закрытого канала возвращает нулевое значение типа данных канала и признак закрытия канала.


Редко
-----------
     -Что будет при записи в закрытый канал? 
Запись в закрытый канал вызовет панику, что приведет к аварийному завершению программы.

     -Чем отличается запись/чтение в буферизованном и небуферизованном канале? 
В небуферизованном канале запись и чтение блокируются до тех пор, пока другая сторона не выполнит соответствующую операцию. В буферизованном канале запись блокируется только если буфер заполнен, а чтение — если буфер пуст.

     -Что произойдет с читателями/писателями если закрыть канал? 
Если закрыть канал, все горутины, ожидающие записи, вызовут панику. Горутины, ожидающие чтения, получат нулевое значение и признак закрытия канала.

     -Что если закрыть закрытый канал? 
Попытка закрыть уже закрытый канал вызовет панику.

     -Что используется для неблокирующего чтения из канала? 

Для неблокирующего чтения из канала используется оператор select с default веткой.

     -Какие операции есть с каналами? 
Основные операции с каналами включают создание канала (make(chan тип)), запись (chan <- значение), чтение (<- chan), и закрытие канала (close(chan)).

     -Какие параметры могут иметь каналы? 
Каналы могут быть буферизованными или небуферизованными. Буферизованные каналы создаются с указанием размера буфера: make(chan тип, размер).

     -Для чего используется select при работе с каналами? 
Оператор select позволяет горутине ожидать нескольких операций с каналами одновременно, выполняя ту, которая готова первой.

     -Как проверить, что канал закрыт? 
Для проверки закрытия канала используется второй возвращаемый результат при чтении из канала: значение, ок := <- chan, где ок будет false, если канал закрыт.

     -Как сделать канал буферизованным? 
Буферизованный канал создается с указанием размера буфера: make(chan тип, размер).

     -Есть две горутины, одна пишет в небуферизованный, а другая в буферизованный канал, оба не читаются. Что произойдет? 
Горутина, пишущая в небуферизованный канал, заблокируется до тех пор, пока другая горутина не прочитает данные. Горутина, пишущая в буферизованный канал, заблокируется только если буфер заполнен.


==============================
    Примитивы синхронизации
==============================
Часто
-------------
     -Какие примитивы синхронизации есть в Golang? 
В Go доступны следующие примитивы синхронизации:
Mutex (мьютекс) — для взаимного исключения.
RWMutex (чтение-запись мьютекс) — для разделения доступа на чтение и запись.
WaitGroup — для ожидания завершения группы горутин.
Cond (условная переменная) — для уведомления горутин о наступлении определенного события.
Once — для выполнения инициализации только один раз.
Atomic — для атомарных операций над переменными.

Средне 
--------------
     -Чем мьютекс отличается от семафора?
Мьютекс обеспечивает доступ к ресурсу только одной горутине в конкретный момент времени. Он используется для защиты критических секций кода.
Семафор может ограничивать доступ к ресурсу нескольким горутинам одновременно. Он используется для управления доступом к ресурсам с ограниченной емкостью.


Редко 
---------------
     -Чем мьютексы отличаются от атомиков?
Мьютексы блокируют доступ к ресурсу, обеспечивая взаимное исключение.
Атомики позволяют выполнять операции над переменными атомарно, без блокировок, что может быть быстрее, но подходит только для простых операций.

     -Что из пакета sync используешь на практике? 
На практике часто используются Mutex, RWMutex, WaitGroup, и Once для синхронизации горутин и управления доступом к общим ресурсам.

     -Что можно использовать для ожидания выполнения N горутин? 
Для ожидания выполнения N горутин используется WaitGroup.

     -Какие примитивы синхронизации использовал в работе и для чего?
Mutex — для защиты критических секций.
RWMutex — для разделения доступа на чтение и запись.
WaitGroup — для ожидания завершения группы горутин.
Once — для инициализации, которая должна быть выполнена только один раз.

     -Как устроена WaitGroup под капотом и как ее можно реализовать самому? 
WaitGroup использует счетчик и методы Add, Done и Wait для управления ожиданием завершения горутин. Реализация включает в себя использование мьютексов для защиты счетчика и условных переменных для уведомления о завершении.

     -Сколько нужно ядер, чтобы начать использовать sync.Map? 
sync.Map рекомендуется использовать в многопоточных программах, где количество ядер превышает одно, чтобы эффективно использовать параллелизм.

     -Расскажи про sync.Map 
sync.Map — это структура данных, оптимизированная для конкурентного доступа. Она использует внутренние мьютексы и атомарные операции для обеспечения безопасного доступа к данным.

     -Расскажи про пакет sync 
Пакет sync предоставляет примитивы синхронизации, такие как мьютексы, условные переменные, группы ожидания и атомарные операции, для управления конкурентным доступом к ресурсам.

     -Когда нужно использовать Mutex, а когда RWMutex?
Mutex используется, когда требуется исключительный доступ к ресурсу.
RWMutex используется, когда требуется разделение доступа на чтение и запись, позволяя нескольким горутинам читать одновременно, но блокируя запись.

     -Есть общий ресурс. Хотим, чтобы к нему одновременно обращались только N горутин. Как это сделать? 
Для этого можно использовать семафор с начальным значением N2.
Запустим 1000 горутин с инкрементом инта. Получим в конце тысячу? Что делать, чтобы получить тысячу? Без синхронизации результат будет непредсказуемым из-за гонок данных. Для получения правильного результата нужно использовать мьютекс или атомарные операции.

     -Есть глобальная мапа, глобальный мьютекс. Две функции. Одна блокирует мьютекс, а вторая нет. Что произойдет? 
Функция, не блокирующая мьютекс, может вызвать гонки данных, что приведет к некорректному поведению программы.

     -В чем разница между Mutex и RWMutex?
Mutex блокирует доступ к ресурсу для всех горутин.
RWMutex позволяет нескольким горутинам читать ресурс одновременно, но блокирует запись.


==============================
    Горутины
==============================
Часто
-------------
     -Что такое горутина? 
Горутина — это легковесный поток выполнения в Go, который запускается с помощью ключевого слова go перед вызовом функции. Горутины позволяют выполнять функции конкурентно с другими горутинами в одном и том же адресном пространстве.

     -Чем горутина отличается от треда? 
Горутины легче и занимают меньше памяти по сравнению с традиционными потоками (тредами). Они управляются рантаймом Go, а не операционной системой, что делает их более эффективными для параллельного выполнения задач.


Средне
--------------
     -В чем преимущества горутин над тредами?
Легковесность: Горутины потребляют меньше памяти и ресурсов.
Управление: Горутины управляются рантаймом Go, что упрощает их создание и управление.
Масштабируемость: Можно запускать тысячи горутин одновременно без значительного влияния на производительность.

Что есть в Golang для многопоточности? 
В Go для многопоточности используются горутины и каналы. Горутины позволяют выполнять функции параллельно, а 
каналы обеспечивают безопасную передачу данных между горутинами.


Редко
-----------
     -Зачем понадобилось добавлять горутины в Golang? 
Горутины были добавлены для упрощения написания конкурентного кода и эффективного использования многопроцессорных систем. Они позволяют разработчикам легко создавать параллельные программы без сложного управления потоками.

     -Как можно остановить горутину? 
Горутины можно остановить с помощью каналов, передавая сигналы завершения или используя контексты (context.Context), которые позволяют отменять операции.

     -Расскажите про конкуррентность и параллельность в Golang 
Конкуррентность в Go означает выполнение нескольких задач одновременно, но не обязательно параллельно. Параллельность — это выполнение нескольких задач одновременно на разных процессорах. Go поддерживает оба подхода с помощью горутин и каналов.

     -Когда возникает утечка горутины? 
Утечка горутины возникает, когда горутина продолжает работать, но больше не выполняет полезную работу и не может быть завершена. Это может произойти из-за неправильного использования каналов или блокировок.

     -Какие есть способы связи между горутинами, какие плюсы и минусы? 
Основной способ связи между горутинами — это каналы. Плюсы включают безопасную передачу данных и синхронизацию. Минусы могут включать сложность в управлении и отладке при большом количестве горутин.



==============================
    Интерфейсы
==============================
Часто
-------------
     -Что такое интерфейс? 
Интерфейс — это абстрактный тип данных, который определяет набор методов, но не реализует их. В программировании интерфейсы позволяют различным объектам взаимодействовать друг с другом, обеспечивая гибкость и модульность кода.


Средне
-------------
     -Как устроен интерфейс? 
Интерфейс состоит из набора методов, которые должны быть реализованы любым типом, который этот интерфейс “имплементирует”. В Go, например, интерфейс объявляется с помощью ключевого слова interface и содержит сигнатуры методов без их реализации.

     -Для чего используется интерфейс? 
Интерфейсы используются для достижения полиморфизма, что позволяет объектам разных типов обрабатывать одинаковые методы. Это упрощает тестирование, расширяемость и поддержку кода.


Редко
---------------
     -Как ты используешь интерфейс в работе? 
Интерфейсы часто используются для определения контрактов между различными частями системы. Например, в веб-разработке интерфейсы могут определять методы для обработки HTTP-запросов, что позволяет легко заменять или изменять компоненты без изменения остального кода.

     -Как в строготипизированном языке сделать функцию, которая работает с разными типами? 
В строготипизированных языках, таких как Go, для этого используются интерфейсы. Функция может принимать параметр типа интерфейса, что позволяет ей работать с любым типом, который реализует этот интерфейс.

     -Зачем нужен пустой интерфейс? 
Пустой интерфейс (interface{}) в Go может содержать значение любого типа. Это полезно для создания универсальных контейнеров или функций, которые могут работать с любыми типами данных.

     -Есть интерфейс, а есть указатель на структуру, который nil. Кладем указатель в интерфейс. Что если сравнить интерфейс с nil? 
Если интерфейс содержит nil-указатель, сравнение интерфейса с nil вернет false, так как интерфейс сам по себе не является nil. Для проверки, является ли интерфейс nil, нужно использовать специальную проверку.

     -Чем any отличается от пустого интерфейса? 
В Go 1.18 и выше any является синонимом пустого интерфейса (interface{}). Они полностью взаимозаменяемы и используются для обозначения любого типа.

     -Чем пустой интерфейс отличается от пустой структуры? 
Пустой интерфейс (interface{}) может содержать значение любого типа, тогда как пустая структура (struct{}) не содержит данных и используется для создания нулевых значений или для оптимизации памяти.



==============================
    Общее
==============================

Средне
---------------
     -Какие преимущества есть у Golang?
Простота и читаемость: Go имеет лаконичный и понятный синтаксис, что облегчает чтение и написание кода.
Высокая производительность: Go компилируется в машинный код, что обеспечивает высокую скорость выполнения программ.
Поддержка конкурентности: Встроенная поддержка горутин и каналов позволяет легко реализовывать параллельные и асинхронные задачи.
Богатая стандартная библиотека: Go предлагает множество встроенных пакетов для решения различных задач.
Кроссплатформенность: Go позволяет создавать исполняемые файлы для различных операционных систем без необходимости в дополнительных зависимостях.


Редко
--------------
     -Какие основные компоненты библиотеки runtime знаешь?
Горутинный планировщик: Управляет выполнением горутин.
Сборщик мусора: Автоматически освобождает неиспользуемую память.
Профилировщик: Инструменты для анализа производительности и поиска узких мест.

     -Какие недостатки есть у Golang?
Ограниченная поддержка ООП: Нет классов и наследования, что может быть непривычно для разработчиков, привыкших к объектно-ориентированным языкам.
Молодость языка: Меньше библиотек и инструментов по сравнению с более зрелыми языками.
Упрощенная система типов: Меньше возможностей для метапрограммирования и рефлексии.

     -Какие фреймворки знаешь для инициализации приложения?
Gin: Легкий и быстрый фреймворк для создания веб-приложений.
Beego: Полнофункциональный фреймворк с поддержкой MVC.
Echo: Высокопроизводительный фреймворк с минималистичным API.
Revel: Фреймворк для быстрого создания приложений с поддержкой горячей перезагрузки.

     -Какая сортировка используется в Golang? 
Go использует несколько алгоритмов сортировки, включая быструю сортировку (quicksort), сортировку слиянием (mergesort) и пирамидальную сортировку (heapsort), в зависимости от типа данных.

     -Какая последняя версия Golang? 
На данный момент последняя версия Golang — 1.23.2, выпущенная 1 октября 2024 года.



==============================
    Планировщик
==============================

Средне
-------------
    - Как работает планировщик Golang?

Редко
-------------
    - Как работает вытесняющая многозадачность?
    - За счет чего достигается параллельное выполнение в Golang? 
    - В чем разница между вытесняющим и кооперативным планировщиком? 
    - В планировщике до версии 1.15 какие операции приводят к переключению контекста горутин?
    - Можно ли руками переключить контекст горутины?
    - Может ли горутина начать работу на одном P, приостановиться и продолжить работу на другом P?
    - Может ли одна очередь украсть горутины у другой?
    - Расскажи про глобальную и локальную очереди
    - Сколько потоков операционной системы мы можем создать?
    - Какой тип планировщика в Golang?
    - Какую функцию выполняет планировщик?
    - Что происходит с горутиной при ее создании?


==============================
    Контекст
==============================
Часто
-------------
    - Для чего используется контекст?

Средне
-------------
    - Что такое контекст?

Редко
-------------
    - Как работает WithCancel?
    - Как применяешь контекст в работе?
    - Как устроен контекст?
    - Какие есть виды контекстов?
    - Перекидывали логгер в контексте?


==============================
    defer
==============================
Часто
-------------
    - Что такое defer?

Средне
-------------
    - Для чего используется defer?
    - Какой порядок выполнения нескольких defer?

Редко
-------------
    - Код в defer выполняется до return или после?
    - Где инициализируется defer, в стеке или куче?


==============================
    Память
==============================

Редко
-------------
    - В одном случае ты передаешь указатель на допустим инт, а в другом случае большую структурку. Как с точки зрения рантайма и потребления ресурсов будет вести приложение?
    - Как узнать где выделяется переменная, в стеке или куче?
    - Как можно обнаружить чересчур большое выделение памяти?
    - Предположим есть рекурсивная функция. Вызывается много раз. Что может произойти?
    - Расскажи про модель памяти в Golang, про стек и про кучу
    - Какое максимальный размер значения для размещения в стеке?
    - Что такое Escape Analysis?
    - Что если при увеличении слайса полностью забьем память?
    - Что быстрее, размещение объектов в стеке или куче и почему?
    - Что такое утечка памяти?
    - Что такое стек?


==============================
    Типы данных
==============================

Средне
-------------
    - Какие типы данных есть в Golang?

Редко
-------------
    - Какой длины руна?
    - Как реализовать Enum в Golang?
    - Если нужно в строке хранить эмодзи, то как это сделать? 
    - Что если во время компиляции переполним тип? В int8 запишем  256?
    - Что происходит при переполнении числа, например в uint8 выйдем за границу на 1?


==============================
    Гонка данных
==============================

Средне
-------------
    - Что такое race condition?
    - Как обнаружить race condition?

Редко
-------------
    - Есть глобальный слайс и я в разных горутинах присваиваю ему аппенд к нему же одного элемента. Будет ли гонка?
    - Где кроме кода может встретиться race condition?
    - Какие есть способы устранения race condition?
    - Флаг -race показывает гонку на этапе компиляции или выполнения?


==============================
    Ошибки/Паника
==============================

Редко
-------------
    - Куда нужно помещать recover?
    - Какая парадигма в Golang с точки зрения обработки исключений и ошибок?
    - Какие есть функции для оборачивания и сравнения ошибок?
    - Для чего используются ошибки, а для чего паника?
    - Для чего используется паника?
    - Есть несколько деферов, в одном из них рековер. Как будет обрабатываться паника? Что если рековер расположен сильно выше и куда бы ты его поместил в случае http вызова? Есть несколько деферов и в одном из них паника, рековер нет, что будет?
    - Что используется для обработки паники?
    - Чем отличается работа с ошибками в Golang от других языков?
    - Что такое паника?


==============================
    Указатели
==============================

Средне
-------------
    - Что такое указатель?

Редко
-------------
    - Что такое ссылка на значение?
    - Чем отличается ссылка от указателя?
    - Чем чревато передавать структуру по ссылке?
    - Для чего используются указатели?
    - Для чего в практике используешь указатели?
    - Какие есть средства для работы с указателями?
    - Когда лучше использовать/не использовать указатели?


==============================
    Дженерики
==============================

Средне
-------------
    - С дженериками работали?

Редко
-------------
    - Чем кодогенерация отличается от дженериков?
    - В какой версии появились дженерики?


==============================
    Конструкции
==============================

Редко
-------------
    - Гарантирует ли порядок выполнения конструкция select-case?
    - Как выглядит конструкция утверждения типа switch?
    - Нужно ли в switch-case проставлять break?
    - Какие есть циклы в Golang?
    - Чем отличается switch от select?


==============================
    ООП
==============================

Средне
-------------
    - Как устроено ООП в Golang?
    - Как реализуется наследование в Golang?


==============================
    Сборщик мусора
==============================

Редко
-------------
    - Как приходилось работать со сборкой мусора?
    - Как работает GC, его алгоритм и когда запускается?
    - Вот выделилась память и она используется, зачем в таком случае нужен GC?
    - Для чего используется GC?
    - Какие есть рекомандации как упростить жизнь GC?
    - Можно ли как-то отключить GC или ограничить запуски?
    - Что такое GC?
    - Что такое сборка мусора?


==============================
    Строки
==============================

Средне
-------------
    - Что такое string?

Редко
-------------
    - Приходит строка в utf8, там могут быть русские символы. Как узнать есть ли там русские буквы икак узнать длину в символах?
    - Какие особенности есть у string?
    - Как работать с utf8 строкой?


==============================
    Структуры
==============================

Редко
-------------
    - Имеет ли значение порядок полей в структуре?
    - От чего зависит размер выравнивания в структуре?
    - Что такое структура?


==============================
    Пакеты
==============================

Редко
-------------
    - Что такое пакет?
    - Расскажи про папку internal
