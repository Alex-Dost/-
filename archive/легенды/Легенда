Здравствуйте, меня зовут Артур. Голенг разработчик с 3+ годами коммерческого опыта.
Ищу работу в связи т.к хочу посмотреть другие компании и другие команды. В текущей компании я почти отработал 2 года и считаю нормальным переход

 --Что ищу-- 
Вариант 1:
Ищу зрелую компанию с хорошовыстроенным процессами где есть возможность развиваться платформенно или в рамках команды, хотелось бы получить лучшую экспертизу, возможно вырасти внутри компании и уже фичалидить(брать ответственность за конкретные направления и задачи)

Вариант 2:
Ищу небольшую команду целенаправленных людей, где любое моё действие будет иметь результаты, явно видный мне. Считаю что мой опыт в компаниях поможет мне в этом(я уже работал в компании где нужно было оценивать и декомпозировать запросы бизнесу, минуя сис аналитиков)


--Мой опыт--
Alanis Software

Начинал в компании связанной с реальным сектором Alanis Software в ней был отдел разработки обслуживающий всю компанию и был он достаточно небольшой: 2 девопса 3 разраба. Я пришёл туда как гофер и постепенно рос по задачам. В них входили: формализация требований бизнеса, написание бизнес кода, развёртывание решения и мониторинга в облаке, разбор инцидентов и ошибок. Рос я достаточно плавно, скорее нарабатывая насмотренность из-за небольшого размера айти команды. Ушёл так как чувствовал, что застаиваюсь и хотелось улучшить экспертизу именно как Go разработчику

WonderSmart Solutions
Пришёл сюда я как middle go разработчик на один из проектов интеграций, вместе с командой успешно его завершили и перешел в основной состав. Компания занимается сопровождением путешественников(отели рестораны маршруты, куча интеграций с перевозчиками и рекламодателями) . Айти команда достаточно большая: примерно 35 - 40 человек, переходящих между проектами. На проекте интеграций на который я изначально пришел было 5 человек, 1 сис аналитик, 2 разработчика, 2 тестировщика. В основной команде куда я перешел после этого было 15 человек: 1 сис аналитик, 8 разрабов, 4 тестера, project lead, devops. Разработкой и тестированием руководили люди из соответствующих команд. Project осуществлял ведение всего проекта.

--Технологический стэк--
Поскольку я работал в командах с разной технической экспертизой, знаком с самописными фреймворками, так и уже готовыми. 

Работал с Go с версии с 1.16 по 1.22(на последнем проекте). 

Из баз данных было: PostgreSQL, из нереляционных: Mongo, elastic, redis. 

С базой данных работал как через ORM(GORM), так и через драйвер базы данных pgx. 

Шина данных стандартно - kafka и немного azure servicebus

Мониторинг: Grafana Prometheus,
Логи записывались локально на тачку и перессылались в логстеш, дальше они были доступны через кибану/ грепнуть на тачке. Старался внедрять структурное логгирование(когда есть заранее подготовленное сообщение, и отдельно подкладывались метрики для улучшения transparency и observability)

Авторизация и аутентификация: использовались стандартные jwt токены, на первом предприятии был поднят identity server, на втором была самописная система. Авторизация на миддлвейр на основе аттрибутов

Тесты: testify, mockery, тест сьюты запускали через CI/CD, скрипты подготавливали окружение(поднимали контейнеры с базами, шиной, наливали данные, а сами тесты запускал самописный воркер)

По способам общения стандартно HTTP, gRPC(гугловские протобафы). От HTTP старались отказываться или переносить все вызовы на гейтвей сервер, а от него уже rpc соединение прокидывать

Для роутинга пользовался gorillamux



Для построения приложения пользовался GIN, либо самописное

Самая интересная задача:
1. Связана с поддержкой сервиса и взаимодействием со старыми участками кода. Подробнее мы написали новый сервис, который врезался в старую базу данных  и по новой обращался с данными пользователей и документами, однако иногда на определенные типы документов приходили жалобы что не проходят изменения или проходят но не полностью, мы долго разбирались что происходит, ни один из участков кода ничего не делал с этим типом доков. Помогло разбирание логов операций в бд - оказалось на изменение этих документов влияла хранимая процедура, после этого было принято решение отказаться от хранимок(по крайней мере, меняющих данные)
2. В системе документооборота требовалось оптимизировать 11 процессов на предприятии, задача не была четко формализированна и мне пришлось идти на производство вместе с сотрудниками пытаться пройти все этапы этого оформления. Постепенно, итеративно создавался процесс и улучшались разные из его этапов. В конце прилетел отзыв, что теперь время сократилось с трех дней до двух часов.  


--Процессы--
На первом месте был классический канбан без спринтов: Была бизнес проблема, бизнес задача, и мы её решали до конца. по мере выполнения объявляли статус

Во втором месте был канбан, поделенный на двухнедельные спринты по истечении которых подводился итог выполненных и невыполненных задач. Для интеграций существовал определенный временный промежуток под который мы подписывались их выполнить. Для инцидентов существовали SLA(Service Level Agreement) - в первые полчаса отреагировать, в течении первых 4 часов решить или отметить почему нет решения, и если за 1 рабочих дня не получалось решить, то эскалировать. 

Оценки задач.
На первом месте лид оценивал задачи, декомпозировал их. Я выполнял, либо мотивировал увеличение сроков. Все оценки были примерные в днях. 
На втором месте в зависимости от задач над которыми я работал либо уже были прмиерные оценки, либо собирались на реьвю двухнедельного скоупа примерно декомпозировали и оценивали задачи(planning poker), затем приступали к выполнению и уже корректировали сроки либо уже создавали новые задачи 
